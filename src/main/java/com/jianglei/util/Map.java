package com.jianglei.util;

/**
 * 键映射到值的对象。
 * 一个map不能包含多个重复的key;
 * 每个key至多指能映射一个value
 *
 * 此接口取代Dictionary类，后者完全是一个抽象类，
 * 而不是一个接口。
 *
 * Map接口提供了三种集合视图，允许以键集，值集或键-值映射关系
 * 查看map的内容。映射顺序定义为迭代器在映射的collection视图上返回
 * 其元素的顺序。一些map实现，像TreeMap,明确保证他们的顺序，其他的，像
 * HashMap没有保证其顺序。
 *
 * 注意：使用可变对象作为map的key时要格外小心。当对象是映射中某个键时，
 * 如果以影响equals比较的方式更改了对象的值，则映射的行为将是不确定的。
 *
 * 此项禁止的一种特殊情况是不允许某个映射将自身作为一个键包含。
 * 虽然允许一个map包含自身作为一个值，但请格小心：在这样的映射上
 * equals和hashCode方法的定义将不再是明确的。
 *
 * 所有通用的映射实现类应该提供两个标准的构造器：一个无参构造器--创建一个空map,
 * 和一个只有一个Map类型参数的构造器--创建一个新的map,其key-value的映射与指定的
 * 参数一样。事实上，后一个构造器允许用户复制任意一个map,生产一个等价的，期望类型的映射
 * 尽管无法强制执行此建议（因为接口不能包含构造器），但是JDK中所有的通用的映射实现类者遵守
 * 了这个建议。
 *
 * 一些map实现对他所能包含的key 和 value 有限制。例如，一些实现不允许null key 和 value
 * 一些实现对他们所包含的key的类型有限制。试图插入一个不合格的键或值将会抛出一个未检查异常，
 * 通常来说是NullPointerException 或 ClassCastException.试图查询是否存在不合格的键或
 * 值可能抛出异常，或者仅返回false；一些实现将采用第一种的形式，一些将采用后一种的表现形式。
 * 通常来说，试图对不合格的键或值执行操作且该操作的完成不会导致不合格的元素被插入映射中时，
 * 将可能抛出一个异常，也可能操作成功，这取决于实现本身。这样的异常在些接口的规范中标记为"可选"
 *
 *
 *
 * Created by jianglei on 2017/4/7.
 */
public interface Map<K, V> {
}
